from datetime import datetime, timedelta, date
import asyncio
import logging
import sys
import keyboards.keyboard
import sqlite
import emoji
import calendar

import openpyxl
from openpyxl.worksheet import worksheet
from datetime import datetime
from aiogram.exceptions import TelegramBadRequest
from aiogram import types
from os import getenv
from re import Match
from magic_filter import RegexpMode
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from contextlib import suppress
from aiogram.fsm.state import State, StatesGroup

from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)




TOKEN = getenv("BOT_TOKEN")

form_router = Router()


class Form(StatesGroup):
    name = State()
    like_bots = State()
    language = State()
    cash = State()
    id_us = State()
    cat_new = State()
    mes_id = State()
    coments = State()
    fuel_vol = State()

class Dates(StatesGroup):
    day = State()
    month = State()
    yer = State()
    itog = State()

class Fuels(StatesGroup):
    fuel_vol = State()
class Flight(StatesGroup):
    name = State()
    status = State()
    cars = State()
    mileage = State()
    fuel = State()
class Flight_exit(StatesGroup):
    status = State()
    name = State()
    finish_odometr = State()
    fuel_residues = State()

class orders_gen(StatesGroup):
    namber = State()



now = datetime.now().strftime("%Y-%m-%d %H:%M")
now2 = datetime.now().strftime("%d.%m.%Y")
now1 = datetime.now().strftime("%Y-%m-%d %H:%M:%S")


# categories - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
# flight - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–µ–π—Å–∞–º–∏
# cancel - –í—ã—Ö–æ–¥


async def on_startup(_):
    await sqlite.db_connect()
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–î –û–ö")


def transform_date(date):
    months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
              '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    day, month, year = now2.split('.')
    return f'{day} {months[int(month) - 1]} {year} –≥–æ–¥–∞'

def transform_date_new(date):
    months = ['—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
              '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è']
    year, month, day = date.split('-')
    return f'{day} {months[int(month) - 1]} {year} –≥–æ–¥–∞'



############ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –°–æ–∑–¥–∞—Ç—å –≠–∫—Å–µ–ª—å
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "order_flights_exel"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Flight_Callback
) -> None:
    flight_id = callback_data.id_fl


    await exel_creat(flight_id)
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω –æ—Ç—á—ë—Ç")
    await callback.answer()



# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫
@form_router.message(Command("delivery"))
async def buy(message: types.Message, state: FSMContext):
    await message.answer(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏",
        reply_markup=keyboards.keyboard.get_dev_pan()
    )


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≠–∫—Å–µ–ª—å
@form_router.message(Command("exel"))
async def buy(message: types.Message, state: FSMContext):
    await state.set_state(orders_gen.namber)

    await message.answer("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ä–µ–π—Å–∞")

@form_router.message(orders_gen.namber)
async def get_info_m(message: types.Message, state: FSMContext) -> None:
    id = message.text
    await exel_creat(id)
    await state.clear()
    await message.answer("Ok")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≠–∫—Å–µ–ª—å
async def exel_creat(id_fl: int):

    filename = "templete.xlsx"
    book = openpyxl.load_workbook(filename=filename)
    sheet: worksheet = book.worksheets[0]

    incr_db = await sqlite.db_sel_other_shapka(id_fl)
    auto = ""
    name = ""
    for i in incr_db:
        sheet["B1"].value = i[0]
        name = i[1]
        auto = i[1]

        sheet["B3"].value = auto +" "+ i[2]
        sheet["B4"].value = i[3]

        sheet["J2"].value = i[4]
        date_in = datetime.strptime((i[4]), '%Y-%m-%d %H:%M')
        date_ex = datetime.strptime((i[5]), '%Y-%m-%d %H:%M')
        sheet["L2"].value = i[5]
        s = i[5]

        # print(s[:-6])
        name = name + "–û—Ç" + s[:-6]
        sheet["J3"].value = i[6]
        sheet["L3"].value = i[7]
        sheet["J4"].value = i[8]
        sheet["L4"].value = i[9]
        sheet["E4"].value = i[10]
        delta_days = (date_ex - date_in).days
        sheet["N2"].value = delta_days



    incr_db = await sqlite.db_sel_tr_pay(id_fl,"incr")
    fuel_db = await sqlite.db_sel_tr_fuels(id_fl)
    other_db = await sqlite.db_sel_tr_other(id_fl)



# # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ
#     print(incr_db)
    nomer = 7
    for i in incr_db:
        pay = i[1]

        if '–∫–∞—Ä—Ç' in pay:
            sheet.cell(row=nomer, column=2).value = i[2]
        else:
            sheet.cell(row=nomer, column=3).value = i[2]

        date = datetime.strptime((i[3]), '%Y-%m-%d %H:%M:%S')
        sheet.cell(row=nomer, column=1).value = date.strftime('%d-%m-%y %H:%M')
        nomer = nomer + 1


# –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ø–ª–∏–≤–æ
    nomer = 7
    for i in fuel_db:
        date = datetime.strptime((i[1]), '%Y-%m-%d %H:%M:%S')
        sheet.cell(row=nomer, column=6).value = date.strftime('%d-%m-%y %H:%M')
        sheet.cell(row=nomer, column=7).value = i[2]
        sheet.cell(row=nomer, column=8).value = i[3]
        nomer = nomer + 1

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    nomer = 7
    coll = 0
    categ = ""



    for i in other_db:

        if nomer > 24:
            nomer = 7
            coll = 3

        date = datetime.strptime((i[1]), '%Y-%m-%d %H:%M:%S')
        sheet.cell(row=nomer, column=9+coll).value = value = date.strftime('%d-%m-%y %H:%M')
        categ = emoji.replace_emoji(i[2], replace='')
        sheet.cell(row=nomer, column=11+coll).value = i[3]

        if i[4] != None:
            categ = categ + " " + f'"{emoji.replace_emoji(i[4], replace="")}"'
            sheet.cell(row=nomer, column=10 + coll).value = categ
        else:
            sheet.cell(row=nomer, column=10 + coll).value = categ
        nomer = nomer + 1




    # book.save(f'{name}.xlsx')

    filepath = f'–û—Ç—á–µ—Ç—ã/{name}.xlsx'
    book.save(filepath)


    # await message.answer(f"–í—Å—Ç–∞–≤–∏–ª")


def date_diff(date1, date2):
    d1 = date.strptime(date1, '%Y-%m-%d')
    t1 = datetime.strptime(date1 + ' ' + date1.split()[-1], '%Y-%m-%d %H:%M').time()
    d2 = date.strptime(date2, '%Y-%m-%d')
    t2 = datetime.strptime(date2 + ' ' + date2.split()[-1], '%Y-%m-%d %H:%M').time()

    delta = d2 - d1 - timedelta(hours = t2.hour-t1.hour , minutes = t2.minute-t1.minute )
    return delta.days


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏–Ø
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "select"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory,
        state: FSMContext
    ) -> None:

    await state.update_data(name=callback_data.val)
    data = await state.update_data(language=callback_data.value)
    await state.update_data(mes_id=callback.message.message_id)

    cash = data["cash"]
    sell = data["language"]
    cat = data["name"]
    us_id = data["id_us"]
    flight = data["id_flight"]


    if sell == 123:


        await callback.message.edit_text(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤."
        )
        await state.set_state(Form.fuel_vol)
        await state.update_data(mes_text=callback.message)


    else:
        await select_cat(callback.message, cat, sell, cash, us_id, 0, flight,"")
        await state.clear()
        print("mes_ID")
        print(callback.message.message_id)

    await callback.answer()


@form_router.message(Form.fuel_vol)
async def get_info_m(message: types.Message, state: FSMContext) -> None:
    litr = message.text
    litr = litr.replace(",", ".")
    try:
        float(litr)
        data = await state.get_data()
        cash = data["cash"]
        sell = data["language"]
        cat = data["name"]
        us_id = data["id_us"]
        flight = data["id_flight"]
        mes_text = data["mes_text"]

        await select_cat(mes_text, cat, sell, cash, us_id, 0, flight, litr)
        await state.clear()

    except ValueError:
        await state.set_state(Form.fuel_vol)
        await message.reply(
            f'–í–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!\nüí¨ –í–≤–µ–¥–∏—Ç–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Ç—Ä–æ–≤. –≤ —Ñ–æ—Ä–º–∞—Ç–µ "112.5"'
        )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ del trancaction
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "tr_cancel"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback
) -> None:

    id_tranz = callback_data.id_tranz
    user = callback_data.val
    data = await sqlite.sel_tranc(id_tranz,user)

    cash = ""
    cat = ""
    date = ""
    for i in data:
        cash = i[0]
        cat = i[1]
        date = i[2]

    await sqlite.db_del_transactions(id_tranz, user)
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ <b>{cat}</b> ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{cash}</b> –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ \n {date} \n---\nüö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
    )



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "tr_date"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:
     # mes_id = mes_id,
    id_tranz = callback_data.id_tranz
    us_id = callback_data.val
    # mes_id = callback.data.mes_id

    data = await sqlite.sel_tranc(id_tranz,us_id)

    cash = ""
    cat = ""
    date = ""
    for i in data:
        cash = i[0]
        cat = i[1]
        date = i[2]

    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    ss = dates.strftime('%d-%m-%y %H:%M')
    month = dates.month
    year = dates.year
    days_in_month = calendar.monthrange(dates.year, dates.month)[1]  # 28
    text_mes = f"–î–æ–±–∞–≤–ª–µ–Ω–æ <b>{cat}</b> ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{cash}</b> –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ \n {date} "
    await state.update_data(text_mes=text_mes)
    await state.update_data(dates=date)
    await state.update_data(dates_in=date)
    await state.update_data(id_tranz=id_tranz)
    await state.update_data(us_id=us_id)

    await callback.message.edit_text(
        text_mes + "\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞:</b>",
        reply_markup=keyboards.keyboard.get_key_date(id_tranz,dates.day,month,year)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "pr_date"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:

    data = await state.get_data()
    date = data["dates"]
    id_tranz = data["id_tranz"]
    text_mes = data["text_mes"]
    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')


    await callback.message.edit_text(
         text_mes + "\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞:</b>",
         reply_markup=keyboards.keyboard.get_key_date(id_tranz, dates.day, dates.month, dates.year)
    )

###################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ—Ç–æ–≤–æ –¥–∞—Ç–∞
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "dates_finish"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        state: FSMContext
) -> None:

    data = await state.get_data()
    text_mes = data["text_mes"]
    id_tranz = data["id_tranz"]
    date = data["dates"]
    date_in = data["dates_in"]
    us_id = data["us_id"]

    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    dates_in = datetime.strptime(date_in, '%Y-%m-%d %H:%M:%S')

    if dates == dates_in:

        text_mes = text_mes[:-20] + f" {transform_date_new(date[:-9])} {date[11:]}"
    else:
        await sqlite.update_trans_date(date,id_tranz)
        text_mes = text_mes[:-20] + f"–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {transform_date_new(date[:-9])} {date_in[11:]}"

    await callback.message.edit_text(
        text_mes,
        reply_markup=keyboards.keyboard.get_keyboard(id_tranz, callback.message.message_id, us_id)
    )
    await state.clear()


###################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–¥–∞
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "dates_year"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        state: FSMContext
) -> None:

    data = await state.get_data()
    text_mes = data["text_mes"]
    id_tranz = data["id_tranz"]
    date = data["dates"]
    us_id = data["us_id"]

    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')

    await callback.message.edit_text(
        text_mes + "\n<b>–í—ã–±–µ—Ä–∏ –≥–æ–¥:</b>",
        reply_markup=keyboards.keyboard.get_key_year(dates.year,id_tranz,us_id)
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–æ–≥–æ –≥–æ–¥–∞
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "year_set"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:

    data = await state.get_data()
    date = data["dates"]
    id_tranz = data["id_tranz"]
    text_mes = data["text_mes"]
    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    select_year = callback_data.val
    d_new = dates.replace(year=select_year)
    await state.update_data(dates=d_new.strftime('%Y-%m-%d %H:%M:%S'))

    await callback.message.edit_text(
        text_mes+ "\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞:</b>",
        reply_markup=keyboards.keyboard.get_key_date(id_tranz,d_new.day,d_new.month,d_new.year)
    )




###################################################
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "dates_month"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        state: FSMContext
) -> None:

    data = await state.get_data()
    text_mes = data["text_mes"]
    id_tranz = data["id_tranz"]
    us_id = data["us_id"]

    await callback.message.edit_text(
        text_mes + "\n<b>–í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü:</b>",
        reply_markup=keyboards.keyboard.get_key_month(id_tranz,us_id)
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "month_set"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:

    data = await state.get_data()
    date = data["dates"]
    id_tranz = data["id_tranz"]
    text_mes = data["text_mes"]
    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    select_month = callback_data.val
    d_new = dates.replace(month=select_month)
    await state.update_data(dates=d_new.strftime('%Y-%m-%d %H:%M:%S'))

    await callback.message.edit_text(
        text_mes + "\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞:</b>",
        reply_markup=keyboards.keyboard.get_key_date(id_tranz,d_new.day,d_new.month,d_new.year)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "dates_days"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        state: FSMContext
) -> None:

    data = await state.get_data()
    text_mes = data["text_mes"]
    date = data["dates"]
    id_tranz = data["id_tranz"]
    us_id = data["us_id"]
    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    days_in_month = calendar.monthrange(dates.year, dates.month)[1]  # 28
    await callback.message.edit_text(
        text_mes + "\n<b>–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å:</b>",
        reply_markup=keyboards.keyboard.get_key_days(days_in_month,id_tranz,us_id)
    )

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–æ–≥–æ –¥–Ω—è
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "days_set"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:

    data = await state.get_data()
    date = data["dates"]
    id_tranz = data["id_tranz"]
    text_mes = data["text_mes"]
    dates = datetime.strptime(date, '%Y-%m-%d %H:%M:%S')
    select_day = callback_data.val
    d_new = dates.replace(day=select_day)
    await state.update_data(dates=d_new.strftime('%Y-%m-%d %H:%M:%S'))

    await callback.message.edit_text(
        text_mes + "\n<b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞:</b>",
        reply_markup=keyboards.keyboard.get_key_date(id_tranz,d_new.day,d_new.month,d_new.year)
    )




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π trancaction
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "tr_caments"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:

    id_tranz = callback_data.id_tranz
    user = callback_data.val
    data = await sqlite.sel_tranc(id_tranz,user)

    cash = ""
    cat = ""
    date = ""
    for i in data:
        cash = i[0]
        cat = i[1]
        date = i[2]

    await callback.message.edit_text(
        f"üí¨ –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    )
    await state.set_state(Form.coments)

    await state.update_data(cat=cat)
    await state.update_data(us_id=user)
    await state.update_data(cash=cash)
    await state.update_data(dates=date)
    await state.update_data(id_tr=id_tranz)


##################################################
############ –ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π

@form_router.message(Form.coments)
# async def process_name(callback: types.CallbackQuery, state: FSMContext) -> None:
async def process_name(message: Message, state: FSMContext) -> None:
    coments = message.text

    data = await state.get_data()
    cash = data["cash"]
    cat = data["cat"]
    us_id = data["us_id"]
    dates = data["dates"]

    idi = data["id_tr"]



    await sqlite.update_trans_com(coments, idi)

    await message.answer( text=f"üëå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.\n –î–æ–±–∞–≤–ª–µ–Ω–æ {cash} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat} \n  –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ \n {dates}, <i><b>{coments}</b></i>",
          reply_markup=keyboards.keyboard.get_keyboard(idi, message.message_id, us_id)
    )
    await state.clear()
    print(f"ID Mess  coments {coments}")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ del trancaction
@form_router.callback_query(keyboards.keyboard.Itog_Callback.filter(F.action == "inc_tr_kl"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Itog_Callback,
        state: FSMContext
) -> None:
    data = await state.get_data()
    cash = data["cash"]
    sell = data["language"]
    cat = data["name"]
    us_id = data["id_us"]
    flight = data["id_flight"]
    name_flight = data["name_flight"]

    znac = callback_data.val
    mes_id = data["mes_id"]

    # print(f"Del_tranc {znac}")
    if znac == 1:
        print(f"date edit {data}")




async def select_cat(message: types.Message, cat: str, sellect: str, cash: str, us_id: int, edit: int, flight: int, fuel: int):
    with suppress(TelegramBadRequest):

        if edit == 0:
            dann = await sqlite.db_insert_transactions(cat, us_id, cash, now1, flight, fuel)
            idi = 0
            users = 0
            for i in dann:
                idi = i[0]

            await message.edit_text(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cash} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat} –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ \n {transform_date(now1)} ",
                reply_markup=keyboards.keyboard.get_keyboard(idi, message.message_id, us_id)
            )
            await message.edit_text(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cash} ‚ÇΩ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {cat} –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ \n {transform_date(now1)} ",
                reply_markup=keyboards.keyboard.get_keyboard(idi,message.message_id,us_id)
            )
            # print(f"id {id}")
            # print(f"message_id {message.message_id}")




@form_router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    id = message.from_user.id
    data = await sqlite.db_sel_driver(id)
    user = ""
    if len(data) != 0:
        for i in data:
            user = i[0]
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é <b>{user}</b>!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        await state.set_state(Form.name)
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–ª–Ω—ã–º –§–ò–û, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç—á—ë—Ç–∞.\n"
            "   –≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–æ–¥–∏—Ç–µ–ª—é –≤ —É—á–µ—Ç–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –∞ —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä–µ–π—Å–∞—Ö.",
            reply_markup=ReplyKeyboardRemove(),
        )

@form_router.message(Form.name)
async def handle_code(message: types.Message, state: FSMContext) -> None:
    user_name = message.text
    user_id = message.from_user.id
    await sqlite.db_insert_driver(user_id,user_name)
    await state.clear()
    await message.answer(
        f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é <b>{user_name}</b>!\n–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å.",
        reply_markup=ReplyKeyboardRemove(),
    )
    # await message.reply("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é :(")


# –û–ë–†–ê–ë–û–¢–ö–ê –ö –ü—Ä–∏—Ö–æ–¥—É
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "incr"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory,
        state: FSMContext
) -> None:
    data = await state.get_data()
    cash = data["cash"]
    name_flight = data["name_flight"]
    users_id = callback.message.chat.id
# –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    data = await sqlite.db_sel_cat(users_id, "incr")

    await callback.message.edit_text(
        f"{name_flight}\n–í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å: {cash} ‚ÇΩ",
        reply_markup=keyboards.keyboard.gen_markup_deb(data)
    )

# –û–ë–†–ê–ë–û–¢–ö–ê –ö –†–∞—Å—Ö–æ–¥—É
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "decr"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory,
        state: FSMContext
) -> None:
    data = await state.get_data()
    cash = data["cash"]
    users_id = callback.message.chat.id

# –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data= await sqlite.db_sel_cat(users_id, "decr")

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –∑–∞–ø–∏—Å–∞—Ç—å: {cash} ‚ÇΩ",
        reply_markup=keyboards.keyboard.gen_markup(data)
    )

# –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@form_router.message(Command("categories"))
async def buy(message: types.Message):

    data= await sqlite.db_sel_edit_cat(message.chat.id)

    if len(data) != 0:
        await message.answer(f"–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=keyboards.keyboard.gen_list_cat(data))
    else:
        await message.answer(
            f"–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ –∏–ª–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
            reply_markup=keyboards.keyboard.gen_list_cat_nul()
        )
# –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "ins_cat_def"))
async def command_start(callback: types.CallbackQuery) -> None:
    dan = await sqlite.db_sel_default_cat()
    print(dan)
    print(callback.message.chat.id)
    cat = ""
    wr = ""
    for i in dan:
        cat = i[0]
        wr = i[1]
        await sqlite.db_insert_cat(cat,wr, callback.message.chat.id, i[2])

    await callback.message.edit_text(
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
    )


# –ü–µ—Ä–µ—Ö–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "edit_cats"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory
        ) -> None:
    name_cat = callback_data.name
    wiring = callback_data.val
    id_cat = callback_data.value
    wiring_e = ""
    wiring_n = ""
    if wiring == "decr":
        wiring_e = "(—Ä–∞—Å—Ö–æ–¥)"
        wiring_n = "–ø—Ä–∏—Ö–æ–¥"
    elif wiring == "incr":
        wiring_e = "(–ø—Ä–∏—Ö–æ–¥)"
        wiring_n = "—Ä–∞—Å—Ö–æ–¥"

    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{name_cat} {wiring_e}</b>",
         reply_markup=keyboards.keyboard.gen_edits_cat(id_cat,wiring_n,name_cat,wiring)
    )


# –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EXIT
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "edit_cats_ex"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
) -> None:

    await callback.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n---\n –í—ã—Ö–æ–¥")

# –£–¥–æ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "edit_cats_del"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory
) -> None:
    name_cat = callback_data.name
    id = callback_data.value
    await sqlite.db_del_edit_cat(id)
    await callback.message.edit_text(f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{name_cat}" \n---\n‚ùå –£–¥–∞–ª–µ–Ω–∞')


# –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞–∫ —Ç–æ–ø–ª–∏–≤–Ω—É—é
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "edit_cats_fuel"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory
) -> None:
    name_cat = callback_data.name
    id = callback_data.value
    await sqlite.db_upg_edit_cat(id,"yes","decr")
    await callback.message.edit_text(f"–ù–∞–∑–Ω–∞—á–∏–ª–∏ {name_cat} –∫–∞–∫ —Ç–æ–ø–ª–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é  \n---\n")

# –ò–∑–º–µ–Ω—è–µ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏—é
@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "edit_cats_wiring"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.NumbersCallbackFactory
) -> None:

    name_cat = callback_data.name
    id = callback_data.value
    wiring = callback_data.val
    wiring_e = ""
    wiring_n = ""
    if wiring == "decr":
        wiring_e = "incr"
        wiring_n = "–ø—Ä–∏—Ö–æ–¥–Ω—É—é"
    elif wiring == "incr":
        wiring_e = "decr"
        wiring_n = "—Ä–∞—Å—Ö–æ–¥–Ω—É—é"

    await sqlite.db_upg_edit_cat_wr(id,wiring_e)
    await callback.message.edit_text(f'–ù–∞–∑–Ω–∞—á–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "{name_cat}" –∫–∞–∫ {wiring_n}  \n---\n')


@form_router.message(Command("cattegor_incr"))
async def buy(message: types.Message):

    data = await sqlite.db_sel_inc()
    await message.answer(f"–°–ø–∏—Å–æ–∫: {data}", reply_markup=keyboards.keyboard.gen_markup(data))


@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "ins_cat"))
async def command_start(callback: types.CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Form.cat_new)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )


@form_router.message(Form.cat_new)
async def process_name(message: Message, state: FSMContext) -> None:
    await state.update_data(cat_new=message.text)
    await state.update_data(id_us=message.from_user.id)

    await message.answer(
        f"–ö–∞–∫ –±—É–¥–µ–º —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, {html.quote(message.text)} ?",
        reply_markup=get_and_cat()
    )
def get_and_cat():
    buttons = [
        [
            types.InlineKeyboardButton(text="–†–∞—Å—Ö–æ–¥", callback_data="num_decr"),
            types.InlineKeyboardButton(text="–ü—Ä–∏—Ö–æ–¥", callback_data="num_incr")
        ],

    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@form_router.message(Command("flight"))
async def process_name(message: Message, state: FSMContext) -> None:
    dann = await sqlite.db_sel_flight("active",message.from_user.id)
    if not dann:
        dat = "üõ£ –û—Ç–∫—Ä—ã—Ç—å"
        act = "fli_new"
        await message.answer(
            f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏.</b> \n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–π—Å–æ–≤.",
                reply_markup=keyboards.keyboard.key_fl_config(dat,act)
                )

    else:
        dat = "üõ£ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
        act = "fli_off"
        for i in dann:

            await message.answer(
                f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Å–∞–º–∏.</b> \n–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–π—Å: <b>{i[1]} –æ—Ç {i[2]} </b>",
                reply_markup=keyboards.keyboard.key_fl_config_activ(dat,act, i[0])

            )
        print(dann)
        await state.update_data(user_id_fli=message.from_user.id)


@form_router.message(Command("list_cat"))
async def process_name(message: Message, state: FSMContext) -> None:
    dann = await sqlite.db_sel_flight("active",message.from_user.id)
    await message.answer(
        "List categor",
        reply_markup=keyboards.keyboard.gen_list_cat()
    )




############ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Ä–µ–π—Å–æ–≤
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "list_flights"))
async def callbacks_num_change_fab(callback: types.CallbackQuery) -> None:
    users = callback.message.chat.id
    data = await sqlite.db_sel_flight_name(users)

    await callback.message.edit_text(
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Ä–µ–π—Å–æ–≤</b>",
        reply_markup=keyboards.keyboard.gen_list_flights(data)
    )


############ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "list_receipt"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Flight_Callback
) -> None:
    users = callback.message.chat.id
    id_fl = callback_data.id_fl
    data = await sqlite.db_sel_tr_pay(id_fl,"incr")

    await callback.message.edit_text(
        f"<b>–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –≤ —Ä–µ–π—Å–µ</b>",
        reply_markup=keyboards.keyboard.gen_list_pay(data)
    )

############ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "list_pay"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Flight_Callback
) -> None:
    users = callback.message.chat.id
    id_fl = callback_data.id_fl

    data = await sqlite.db_sel_tr_pay(id_fl,"decr")

    await callback.message.edit_text(
        f"<b>–°–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç –≤ —Ä–µ–π—Å–µ</b>",
        reply_markup=keyboards.keyboard.gen_list_pay(data)
    )

############ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–∞–≤–æ–∫
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "list_fuels"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        callback_data: keyboards.keyboard.Flight_Callback
        ) -> None:
    users = callback.message.chat.id
    id_fl = callback_data.id_fl
    data = await sqlite.db_sel_tr_fuels(id_fl)
    print(data)
    litr = 0
    if len(data) != 0:
        for i in data:
            litr = litr + i[2]

        await callback.message.edit_text(
            f"<b>‚õΩ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–∞–≤–æ–∫ –≤ —Ä–µ–π—Å–µ</b>\n–ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{litr}–ª.</b>",
            reply_markup=keyboards.keyboard.gen_list_fuels(data)
        )
    else:
        await callback.message.edit_text(f"<b>‚õΩ –£—á—Ç—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–∞–≤–æ–∫ –Ω–µ—Ç.</b>" )

############ –í –†–µ–π—Å
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "fli_new"))
async def callbacks_num_change_fab(callback: types.CallbackQuery) -> None:
    data = await sqlite.db_sel_cars()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        reply_markup=keyboards.keyboard.gen_select_cars(data)
        )



@form_router.callback_query(keyboards.keyboard.NumbersCallbackFactory.filter(F.action == "selcars"))
async def process_name_flight(callback: types.CallbackQuery,
                                  callback_data: keyboards.keyboard.NumbersCallbackFactory,
                                  state: FSMContext) -> None:
    users = callback.message.chat.id
    print(f"ID users: {users}")

    await state.update_data(carsM=callback_data.val)
    await state.update_data(cars=callback_data.value)
    data = await sqlite.db_sel_nam_point(users)
    await callback.message.edit_text(f"<b>–ö—É–¥–∞ –µ–¥–∏–º ?</b>\n–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç.", reply_markup=keyboards.keyboard.gen_select_point(data))
    await state.set_state(Flight.name)

############ –û–±—Ä–∞–±–æ—Ç–∫–∞ –í—ã–±–æ—Ä–∞ –ö–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫—Ç –†–µ–π—Å–∞
@form_router.callback_query(keyboards.keyboard.Callback_Point.filter(F.action == "point"))
async def process_name_flight(callback: types.CallbackQuery,
                                  callback_data: keyboards.keyboard.Callback_Point,
                                  state: FSMContext) -> None:

    await state.update_data(name=callback_data.value)
    await callback.message.answer(
        text=f"–†–µ–π—Å : {callback_data.value} \n–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Flight.mileage)


############ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ö–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫—Ç –†–µ–π—Å–∞
@form_router.message(Flight.name)
async def process_name_flight(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    name = message.text
    await message.answer(
            text=f"–†–µ–π—Å : {name} \n–í–≤–µ–¥–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Flight.mileage)

############ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–±–µ–≥–∞
@form_router.message(Flight.mileage)
async def process_write_mileage(message: Message, state: FSMContext) -> None:
    await state.update_data(mileage=message.text)
    await message.answer(
        text=f"–í–≤–µ–¥–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Flight.fuel)

############ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
@form_router.message(Flight.fuel)
async def process_write_mileage(message: Message, state: FSMContext) -> None:
    await state.update_data(fuel=message.text)
    await state.update_data(id_us=message.from_user.id)
    data = await state.get_data()
    mileage = data["mileage"]
    name = data["name"]
    fuel_in = data["fuel"]
    cars = data["cars"]
    carsMarka = data["carsM"]
    await message.answer(
            text=f"–†–µ–π—Å : {name} –æ—Ç {transform_date(now1)}\n–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{carsMarka}</b>\n–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: <b>{mileage}</b>\n –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: <b>{fuel_in}</b>\n –í–µ—Ä–Ω–æ?",
        reply_markup=keyboards.keyboard.key_flight(),
    )


@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "fli_okdist"))
async def callbacks_num_change_fab(
        callback: types.CallbackQuery,
        state: FSMContext
) -> None:

    data = await state.get_data()
    mileage = data["mileage"]
    name = data["name"]
    fuel = data["fuel"]
    id_us = data["id_us"]
    cars = data["cars"]
    carsMarka = data["carsM"]
    status = "active"
    await callback.message.edit_text(
        f"–∑–∞–ø–∏—Å–∞–ª:\n –†–µ–π—Å : {name} –æ—Ç {transform_date(now1)}\n –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{carsMarka}</b>\n–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: <b>{mileage}</b>\n –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: {fuel}."
    )
    await sqlite.db_insert_flight(name,id_us,fuel,mileage,now,cars,status)
    await state.clear()



@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "now_cars"))
async def process_name_flight(callback: types.CallbackQuery, state: FSMContext) -> None:

    await callback.message.edit_text("–û—Ç–º–µ–Ω–∞")
    await state.clear()


############/ –í –†–µ–π—Å /##########################################################

############ –ò–∑ –†–µ–π—Å–∞ /##########################################################

@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "fli_off"))
async def process_name(callback: types.CallbackQuery, state: FSMContext) -> None:
    print(callback.message.from_user.id)


    dat = await state.get_data()
    user_id_fli = dat["user_id_fli"]

    dann = await sqlite.db_sel_flight("active", user_id_fli)

    for i in dann:

        await callback.message.edit_text(
            f"–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–π—Å: <b>{i[1]} –æ—Ç {i[2]} </b>",
            reply_markup=get_key_fl()
        )

        await state.update_data(name= i[1]+" –æ—Ç "+ i[2])
        await state.update_data(id = i[0])
        await state.update_data(date_in = i[2])
        await state.update_data(in_fuel=i[4])
        await state.update_data(in_odometr=i[5])
        await state.update_data(cars=i[3])
def get_key_fl():
    buttons = [
        [
            types.InlineKeyboardButton(text="–î–∞", callback_data="exit_flight"),
            types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="num_incr")
        ],
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@form_router.callback_query(F.data.startswith("exit_flight"))
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏ –∫–æ–Ω–µ—á–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂.")
    await state.set_state(Flight_exit.finish_odometr)
    print("1111")


@form_router.message(Flight_exit.finish_odometr)
async def process_write_mileage(message: Message, state: FSMContext) -> None:
    print(message.text)
    await state.update_data(odometr=message.text)
    await message.answer(
        text=f"–í–≤–µ–¥–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞.",
        reply_markup=ReplyKeyboardRemove(),
    )
    await state.set_state(Flight_exit.fuel_residues)

@form_router.message(Flight_exit.fuel_residues)
async def process_write_mileage(message: Message, state: FSMContext) -> None:
    ful = await state.update_data(fuel=message.text)
    dat = await state.get_data()
    id = dat["id"]
    carsMarka = dat["cars"]
    name = dat["name"]
    odometr = dat["odometr"]
    fuel = dat["fuel"]
    status = "fulfilled"
    #  await sqlite.db_obdate_flight(id,fuel,odometr,now,status)

    await message.answer(
        f"–ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–π—Å —Å –¥–∞–Ω–Ω—ã–º–∏?\n –†–µ–π—Å : {name} \n –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {carsMarka}\n–ö–æ–Ω–µ—á–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {odometr}\n –û—Å—Ç–∞—Ç–æ–∫ —Ç–æ–ø–ª–∏–≤–∞: {fuel}.",
        reply_markup=keyboards.keyboard.key_flight_confirmation()
    )

@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "fli_confirmation"))
async def process_like_write_bots(callback: types.CallbackQuery,
                                  callback_data: keyboards.keyboard.NumbersCallbackFactory,
                                  state: FSMContext) -> None:


    dat = await state.get_data()
    id = dat["id"]
    carsMarka = dat["cars"]
    name = dat["name"]

    in_odometr = dat["in_odometr"]
    odometr = dat["odometr"]
    Mileage_covered = int(odometr) - int(in_odometr)

    in_fuel = dat["in_fuel"]
    fuel = dat["fuel"]
    Fuel_used_up = int(in_fuel)-int(fuel)

    Fuel_consumption = round(Fuel_used_up / Mileage_covered * 100, 2)

    status = "fulfilled"
    await sqlite.db_obdate_flight(id,fuel,odometr,now,status)
    print(id)
    await exel_creat(id)

    await callback.message.edit_text(
        f"–ó–∞–ø–∏—Å–∞–ª. \n–†–µ–π—Å : {name} –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂: {Mileage_covered}\n –ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ —Ç–æ–ø–ª–∏–≤–∞: {Fuel_used_up}\n –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: {Fuel_consumption}"
    )
    # await exel_creat(id)
    await state.clear()






async def update_num_text(message: types.Message, new_value: str):
    await message.edit_text(
        f"–£–∏—Ç—ã–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {new_value} –∫–∞–∫",
        reply_markup=get_keyboard()
    )
def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–†–∞—Å—Ö–æ–¥", callback_data="num_decr"),
            types.InlineKeyboardButton(text="–ü—Ä–∏—Ö–æ–¥", callback_data="num_incr")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard



###################################################
@form_router.callback_query(F.data.startswith("num_"))
async def callbacks_num(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    us_id = data["id_us"]
    cat_new = data["cat_new"]
    action = callback.data.split("_")[1]
    await state.clear()

    if action == "incr":
        await sqlite.db_insert_cat(cat_new, "incr", us_id," ")
        await callback.message.edit_text(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è : <b>"{cat_new}"</b> –∫–∞–∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ.')

    elif action == "decr":
        await sqlite.db_insert_cat(cat_new, "decr", us_id,"")
        await callback.message.edit_text(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è : <b>"{cat_new}"</b> –∫–∞–∫ —Ä–∞—Å—Ö–æ–¥.')

    elif action == "finish":
        await sqlite.db_insert_cat(cat_new, "finish", us_id)
        await callback.message.edit_text(f"–ò—Ç–æ–≥–æ: {us_id} finish {cat_new}")

    await callback.answer()


@form_router.message(Form.cat_new, F.text.casefold() == "No")
async def process_like_write_bots(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.reply(
        "–ö—Ä—É—Ç–æ! –Ø —Ç–æ–∂–µ –≤ –†–∞—Å—Ö–æ–¥",
        reply_markup=ReplyKeyboardRemove(),
    )


# @form_router.message(Command("cancel"))
@form_router.message(F.text.casefold() == "cancel")
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    Allow user to cancel any action
    """
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info("Cancelling state %r", current_state)
    await state.clear()
    await message.answer(
        "Cancelled.",
        reply_markup=ReplyKeyboardRemove(),
    )

###### –û–¢–ß–Å–¢
# @form_router.message(Command("order"))
@form_router.callback_query(keyboards.keyboard.Flight_Callback.filter(F.action == "order_flights"))
async def cancel_handler(callback: types.CallbackQuery,
                         callback_data: keyboards.keyboard.Flight_Callback,
                         state: FSMContext) -> None:
    user_id = callback.message.chat.id
    flight_id = callback_data.id_fl
    status_fl = callback_data.st_fl

    fuel = 0
    fuels = 0
    # print(f"id {user_id} fl_id: {flight_id}")
    order_str = ""
    sum_incr = 0
    sum_decr = 0
    driver = ""
    order_str = order_str + "<b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</b>\n"
   # –ó–∞–ø—Ä–æ—Å—ã
    incrdat = await sqlite.db_sel_tr_order(flight_id,"incr")
    decrdat = await sqlite.db_sel_tr_order(flight_id, "decr")
    odometr = await sqlite.db_order_info(flight_id)
    drivers = await sqlite.db_sel_driver(user_id)
    # print(f"drivers {drivers}")
    for i in drivers:
        driver = i[0]

    for i in incrdat:
        order_str = order_str + f"  {i[1]} Œ£: {i[2]}—Ä.\n"
        sum_incr = sum_incr + i[2]
    order_str = order_str + f"<b>–ò—Ç–æ–≥–æ</b> –ø–æ–ª—É—á–µ–Ω–æ: <b>{sum_incr}—Ä.</b>\n"

    order_str = order_str + "\n<b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
    for i in decrdat:
        order_str = order_str + f"  {i[1]} Œ£: {i[2]}—Ä.\n"
        sum_decr = sum_decr + i[2]
        if i[3] != 0.0:
            fuel = i[3]

    order_str = order_str + f"<b>–ò—Ç–æ–≥–æ</b> —Ä–∞—Å—Ö–æ–¥–æ–≤: <b>{sum_decr}—Ä.</b>\n"
    order_str = order_str + f"<b>–û—Å—Ç–∞—Ç–∫</b> –î–°: <b>{sum_incr-sum_decr}—Ä.</b>\n"
    order_str = order_str + f"<b>\n–¢–æ–ø–ª–∏–≤–æ:</b>\n"
    # odom_in = 0
    # odom_ex = 0
    odom = 0
    auto =""
    for i in odometr:
        order_str = order_str + f"  –ù–∞—á–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {i[0]} –ª.\n  –ó–∞–ø—Ä–∞–≤–ª–µ–Ω–æ: {fuel} –ª.\n"
        fuels = fuel + i[0]

        if i[1] != None:
             fuels = fuels - i[1]
             order_str = order_str + f"  –ö–æ–Ω–µ—á–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫: {i[1]} –ª.\n<b>–ò–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–æ:</b> {fuels} –ª.\n\n<b>–û–¥–æ–º–µ—Ç—Ä\n</b>"

        else:
            order_str = order_str + f"\n\n<b>–û–¥–æ–º–µ—Ç—Ä\n</b>"

        order_str = order_str + f"  –ù–∞—á–∞–ª—å–Ω—ã–π: {i[2]} km.\n"
        odom = i[2]

        if i[3] != None:
            # odom_ex = i[3]
            # odom = odom_ex - odom_in
            odom = abs(i[3] -odom)
            order_str = order_str + f"  –ö–æ–Ω–µ—á–Ω—ã–π: {i[3]} km.\n<b>–ü—Ä–æ–π–¥–µ–Ω–æ : {odom} km.</b>"
            order_str = order_str + f"\n \n<b>–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:</b> {round(fuels / odom * 100,2)} –ª/100–∫–º"

        auto = i[6]
        order_str = order_str + f"\n–ê–≤—Ç–æ: {auto} {i[7]}"
        order_str = order_str + f"\n–í–æ–¥–∏—Ç–µ–ª—å: {driver}"


    if status_fl =="fulfilled":
        await callback.message.edit_text(order_str,
            reply_markup=keyboards.keyboard.gen_key_exel(flight_id)
        )

    else:
        await callback.message.edit_text(order_str)







async def main():
    bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)

    dp = Dispatcher()
    dp.include_router(form_router)

    await dp.start_polling(bot,
                           on_startup=on_startup
                           )


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO,
                        stream=sys.stdout,
                        )
    asyncio.run(main())
